(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{380:function(n,e,a){"use strict";a.r(e);var s=a(42),t=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[n._v("#")]),n._v(" 装饰器")]),n._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[n._v("#")]),n._v(" 介绍")]),n._v(" "),a("blockquote",[a("p",[n._v("装饰器是一种特殊类型的声明，它能够附加到类、类的函数、类属性、类函数的参数上，以达到修改类的行为。")])]),n._v(" "),a("h3",{attrs:{id:"装饰器的种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器的种类"}},[n._v("#")]),n._v(" 装饰器的种类")]),n._v(" "),a("h4",{attrs:{id:"根据装饰器的位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据装饰器的位置"}},[n._v("#")]),n._v(" 根据装饰器的位置")]),n._v(" "),a("ul",[a("li",[n._v("类装饰器")]),n._v(" "),a("li",[n._v("类函数装饰器")]),n._v(" "),a("li",[n._v("类属性装饰器")]),n._v(" "),a("li",[n._v("类函数参数装饰器")])]),n._v(" "),a("h4",{attrs:{id:"根据装饰器是否有参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据装饰器是否有参数"}},[n._v("#")]),n._v(" 根据装饰器是否有参数")]),n._v(" "),a("ul",[a("li",[n._v("无参装饰器(一般装饰器)")]),n._v(" "),a("li",[n._v("有参装饰器(装饰器工厂)")])]),n._v(" "),a("h3",{attrs:{id:"类的装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的装饰器"}},[n._v("#")]),n._v(" 类的装饰器")]),n._v(" "),a("ul",[a("li",[n._v("类装饰器的写法")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function desc(target) {\n  console.log(target) // 输出 [Function: Person]表示当前装饰的类\n}\n\n@desc\nclass Person {\n  public name: string | undefined\n  public age: number | 0\n\n  constructor(name: string, age: number) {\n    this.name = name\n    this.age = age\n  }\n}\n")])])]),a("p",[n._v("此处 target 类型会隐式定义为any, 这样会引发一个TS问题，解决方案：设置tsconfig.json")]),n._v(" "),a("p",[n._v('1、"noImplicitAny": false')]),n._v(" "),a("p",[n._v("或者")]),n._v(" "),a("p",[n._v('2、"strict": false')]),n._v(" "),a("ul",[a("li",[n._v("使用类的装饰器扩展类的属性和方法\ninterface Class {\nnew(...args: any[]): {}\n}")])]),n._v(" "),a("p",[n._v("function desc"),a("T",{attrs:{extends:"",Class:""}},[n._v("(Target: T) {\nconsole.log(Target)\nreturn class extends Target {\ngender = '男'\nsay() {\nconsole.log(this.gender)\n}\n}\n}")])],1),n._v(" "),a("p",[n._v("@desc\nclass Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),n._v(" "),a("p",[n._v("say() {\nconsole.log(this.name, this.age)\n}\n}")]),n._v(" "),a("p",[n._v("let p = new Person('Felix', 20)\nconsole.log(p)\np.say()")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 使用装饰器修改类的构造函数(构造函数的重载、方法重载)\n\n")])])]),a("p",[n._v("function desc(target) {\nreturn class extends target{\nname = 'Felixlu'\nage = 18\nsayHell() {\nconsole.log('我是重载后的', this.name)\n}\n}\n}")]),n._v(" "),a("p",[n._v("@desc\nclass Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("constructor() {\nthis.name = 'Felix'\nthis.age = 20\n}")]),n._v(" "),a("p",[n._v("sayHell() {\nconsole.log('hello word', this.name)\n}\n}")]),n._v(" "),a("p",[n._v("let p = new Person()\nconsole.log(p)\np.sayHell()")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 装饰器工厂的写法\n\n")])])]),a("p",[n._v("function desc(params: string) {\nreturn function (target: any) {\nconsole.log('params', params)\nconsole.log('target', target)\n// 直接在原型上扩展一个属性\ntarget.prototype.apiUrl = params\n}\n}")]),n._v(" "),a("p",[n._v("@desc('好程序员')\nclass P {\nsay() {\nconsole.log('说话')\n}\n}")]),n._v(" "),a("p",[n._v("let p: any = new P()\nconsole.log(p.apiUrl)")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n### 类函数装饰器\n\n> 它应用到方法上，可以用来监视、修改、替换该方法\n\n* 基本使用\n\n")])])]),a("p",[n._v("function desc(target, key, descriptor) {\nconsole.log('target', target) // Person { say: [Function] } 表示类的原型\nconsole.log('key', key) // 被装饰的函数名\nconsole.log('descriptor', descriptor) // 被装饰的函数的对象属性\n}")]),n._v(" "),a("p",[n._v("class Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),n._v(" "),a("p",[n._v("@desc\nsay() {\nconsole.log('说的方法')\n}\n}")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 在装饰器中添加类的原型属性和原型方法\n\n")])])]),a("p",[n._v("function desc(target, key, descriptor) {\ntarget.gender = '男'\ntarget.foo = function () {\nconsole.log('我是原型上的方法')\n}\n}")]),n._v(" "),a("p",[n._v("class Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),n._v(" "),a("p",[n._v("@desc\nsay() {\nconsole.log('说的方法')\n}\n}")]),n._v(" "),a("p",[n._v("// 测试代码\nlet p: any = new Person('Felixlu', 20)\nconsole.log(p)\nconsole.log(Person.prototype)\np.say()\nconsole.log(p.gender); // 使用p原型链上的属性\np.foo() // 调用了p原型链上的方法")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 使用装饰器拦截函数的调用（替换）\n\n")])])]),a("p",[n._v("function desc(params: string) {\nreturn function (target: any, key: string, descriptor: {[propsName: string]: any}) {\n// 修改被装饰的函数\ndescriptor.value = function (...args: Array"),a("any",[n._v(") {\nargs = args.map(it => String(it))\nconsole.log(args)\n}\n}\n}")])],1),n._v(" "),a("p",[n._v("class Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),n._v(" "),a("p",[n._v("@desc('装饰器上的参数')\nsay() {\nconsole.log('说的方法')\n}\n}")]),n._v(" "),a("p",[n._v("let p: any = new Person('Felixlu', 20)\nconsole.log(p)\np.say(123, 23, '你好')")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 使用装饰器拦截函数的调用(附加新的功能)\n\n")])])]),a("p",[n._v("function desc(params: string) {\nreturn function (target: any, key: string, descriptor: {[propsName: string]: any}) {\n// 修改被装饰的函数的\nlet method = descriptor.value\ndescriptor.value = function (...args: Array"),a("any",[n._v(") {\nargs = args.map(it => String(it))\nconsole.log(args)\nmethod.apply(this, args)\n}\n}\n}\nclass Person {\npublic name: string | undefined\npublic age: number | 0")])],1),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),n._v(" "),a("p",[n._v("@desc('装饰器上的参数')\nsay(...args) {\nconsole.log('说的方法', args)\n}\n}")]),n._v(" "),a("p",[n._v("let p = new Person('Felixlu', 20)\nconsole.log(p)\np.say(123, 23, '你好')")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n### 类属性装饰器\n\n* 基本用法\n\n")])])]),a("p",[n._v("function desc(target, name) {\nconsole.log('target', target, target.constructor) // 表示类的原型\nconsole.log('name', name) // 表示被装饰属性名\n}")]),n._v(" "),a("p",[n._v("class Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("@desc\nprivate gender: string | undefined")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}\n}")]),n._v(" "),a("p",[n._v("let p = new Person('Felixlu', 20)\nconsole.log(p)")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 在装饰器中修改属性值\n\n")])])]),a("p",[n._v("function desc(target, name) {\ntarget[name] = '女'\n}")]),n._v(" "),a("p",[n._v("class Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("@desc\npublic gender: string | undefined")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),n._v(" "),a("p",[n._v("say() {\nconsole.log(this.name, this.age, this.gender)\n}\n}")]),n._v(" "),a("p",[n._v("let p = new Person('Felixlu', 20)\nconsole.log(p)\np.say()")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 类函数参数的装饰器\n\n> 参数装饰器表达式会在运行时候当做函数被调用，以使用参数装饰器为类的原型上附加一些元数据\n\n* 基本用法\n\n")])])]),a("p",[n._v("function desc(params: string) {\nreturn function (target: any, key, index) {\nconsole.log(target); // 类的原型\nconsole.log(key); // 被装饰的名字\nconsole.log(index); // 序列化\n}\n}\nclass Person {\npublic name: string | undefined\npublic age: number | 0")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),n._v(" "),a("p",[n._v("say(@desc('参数装饰器') age: number) {\nconsole.log('说的方法')\n}\n}")]),n._v(" "),a("p",[n._v("let p = new Person('Felixlu', 20)\nconsole.log(p)\np.say(20)")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n* 为类的原型上添加一些东西\n\n")])])]),a("p",[n._v("function desc(params: string) {\nreturn function (target: any, key, index) {\nconsole.log(target); // 类的原型\nconsole.log(key); // 被装饰的名字\nconsole.log(index); // 序列化\ntarget.message = params;\n}\n}\nclass Person {\npublic name: string | undefined;\npublic age: number | 0;")]),n._v(" "),a("p",[n._v("constructor(name, age) {\nthis.name = name;\nthis.age = age;\n}")]),n._v(" "),a("p",[n._v("say(@desc('参数装饰器') age: number) {\nconsole.log('说的方法')\n}\n}")]),n._v(" "),a("p",[n._v("let p: any = new Person('哈哈', 20);\nconsole.log(p);\np.say(20);\nconsole.log(p.message)")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n### 几种装饰器的执行顺序\n\n")])])]),a("p",[n._v("function logCls(params: string) {\nreturn function (target: any) {\nconsole.log('4.类的装饰器');\n}\n}")]),n._v(" "),a("p",[n._v("function logMethod(params: string) {\nreturn function (target: any, key: string, descriptor: {[propsName: string]: any}) {\nconsole.log('3.类的函数装饰器');\n}\n}")]),n._v(" "),a("p",[n._v("function logParams(params: string) {\nreturn function (target: any, name: string) {\nconsole.log('1.类属性装饰器');\n}\n}")]),n._v(" "),a("p",[n._v("function logQuery(params: string) {\nreturn function (target: any, key: string, index: number) {\nconsole.log('2.函数参数装饰器');\n}\n}")]),n._v(" "),a("p",[n._v("@logCls('类的装饰器')\nclass Person{\n@logParams('属性装饰器')\npublic name: string | undefined;")]),n._v(" "),a("p",[n._v("@logMehod('函数装饰器')\ngetData(@logQuery('函数参数装饰器') age: number, @logQuery('函数参数装饰器') gender: string) {\nconsole.log('----');\n}\n}")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])])])}),[],!1,null,null,null);e.default=t.exports}}]);