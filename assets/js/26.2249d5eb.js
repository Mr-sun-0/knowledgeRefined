(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{383:function(a,t,e){"use strict";e.r(t);var s=e(42),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"变量声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[a._v("#")]),a._v(" 变量声明")]),a._v(" "),e("h2",{attrs:{id:"变量声明-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量声明-2"}},[a._v("#")]),a._v(" 变量声明")]),a._v(" "),e("p",[a._v("let和const是JavaScript里相对较新的变量声明方式。 像我们之前提到过的， let在很多方面与var是相似的，但是可以帮助大家避免在JavaScript里常见一些问题。 const是对let的一个增强，它能阻止对一个变量再次赋值。")]),a._v(" "),e("p",[a._v("因为TypeScript是JavaScript的超集，所以它本身就支持let和const。下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 var。")]),a._v(" "),e("h2",{attrs:{id:"var-声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-声明"}},[a._v("#")]),a._v(" var 声明")]),a._v(" "),e("p",[a._v("一直以来我们都是通过var关键字定义JavaScript变量。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a = 10\n")])])]),e("p",[a._v("大家都能理解，这里定义了一个名为a值为10的变量。\n我们也可以在函数内部定义变量：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('function f() {\n  var message = "千锋教育·好程序员"\n  return message\n}\n')])])]),e("p",[a._v("并且我们也可以在其它函数内部访问相同的变量。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f() {\n  var a = 10\n  return function g() {\n    var b = a + 1\n    return b\n  }\n}\nvar g = f()\ng() // returns 11\n")])])]),e("p",[a._v("上面的例子里，g可以获取到f函数里定义的a变量。 每当g被调用时，它都可以访问到f里的a变量。")]),a._v(" "),e("p",[a._v("即使当g在f已经执行完后才被调用，它仍然可以访问及修改a。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f() {\n  var a = 1\n\n  a = 2\n  var b = g()\n  a = 3\n\n  return b\n\n  function g() {\n    return a\n  }\n}\n\nf() // returns 2\n")])])]),e("h3",{attrs:{id:"作用域规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域规则"}},[a._v("#")]),a._v(" 作用域规则")]),a._v(" "),e("p",[a._v("对于熟悉其它语言的人来说，var声明有些奇怪的作用域规则。 看下面的例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f(shouldInitialize: boolean) {\n  if (shouldInitialize) {\n    var x = 10\n  }\n  return x\n}\n\nf(true)  // returns '10'\nf(false) // returns 'undefined'\n")])])]),e("p",[a._v("有些读者可能要多看几遍这个例子。变量x是定义在"),e("em",[a._v("if语句里面")]),a._v("，但是我们却可以在语句的外面访问它。这是因为 var声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，包含它的代码块对此没有什么影响。有些人称此为"),e("em",[a._v("var作用域或函数作用域")]),a._v("。函数参数也使用函数作用域。")]),a._v(" "),e("p",[a._v("这些作用域规则可能会引发一些错误。 其中之一就是，多次声明同一个变量并不会报错：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function sumMatrix(matrix: number[][]) {\n  var sum = 0\n  for (var i = 0; i < matrix.length; i++) {\n    var currentRow = matrix[i]\n    for (var i = 0; i < currentRow.length; i++) {\n      sum += currentRow[i]\n    }\n  }\n  return sum\n}\n")])])]),e("p",[a._v("这里很容易看出一些问题，里层的for循环会覆盖变量i，因为所有i都引用相同的函数作用域内的变量。 有经验的开发者们很清楚，这些问题可能在代码审查时漏掉，引发无穷的麻烦。")]),a._v(" "),e("h3",{attrs:{id:"捕获变量怪异之处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#捕获变量怪异之处"}},[a._v("#")]),a._v(" 捕获变量怪异之处")]),a._v(" "),e("p",[a._v("快速的猜一下下面的代码会返回什么：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (var i = 0; i < 10; i++) {\n  setTimeout(function() { console.log(i) }, 100 * i)\n}\n")])])]),e("p",[a._v("介绍一下，setTimeout会在若干毫秒的延时后执行一个函数（等待其它代码执行完毕）。")]),a._v(" "),e("p",[a._v("好吧，看一下结果：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n")])])]),e("p",[a._v("很多JavaScript程序员对这种行为已经很熟悉了。但也有大多数人可能期望输出结果是这样：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n")])])]),e("p",[a._v("还记得我们上面提到的捕获变量吗？")]),a._v(" "),e("p",[a._v("我们传给setTimeout的每一个函数表达式实际上都引用了相同作用域里的同一个i。")]),a._v(" "),e("p",[a._v("让我们花点时间思考一下这是为什么。 setTimeout在若干毫秒后执行一个函数，并且是在for循环结束后。 for循环结束后，i的值为10。 所以当函数被调用的时候，它会打印出 10！")]),a._v(" "),e("p",[a._v("一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时i的值：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (var i = 0 i < 10 i++) {\n  // 捕获当前i的状态\n  // 应用当前的值作为参数来执行函数\n  (function(i) {\n    setTimeout(function() { console.log(i) }, 100 * i)\n  })(i)\n}\n")])])]),e("h2",{attrs:{id:"let-声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-声明"}},[a._v("#")]),a._v(" let 声明")]),a._v(" "),e("p",[a._v("现在你已经知道了var存在一些问题，这恰好说明了为什么用let语句来声明变量。 除了名字不同外， let与var的写法一致。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let hello = "Hello!"\n')])])]),e("p",[a._v("主要的区别不在语法上，而是语义，我们接下来会深入研究。")]),a._v(" "),e("h3",{attrs:{id:"块作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#块作用域"}},[a._v("#")]),a._v(" 块作用域")]),a._v(" "),e("p",[a._v("当用let声明一个变量，它使用的是词法作用域或块作用域。不同于使用var声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或for循环之外是不能访问的。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f(input: boolean) {\n  let a = 100\n\n  if (input) {\n    // 这里仍然可以引用a\n    let b = a + 1\n    return b\n  }\n\n  // 报错: 'b' 在这里不存在\n  return b\n}\n")])])]),e("p",[a._v("这里我们定义了2个变量a和b。a的作用域是在f函数体内，而b的作用域是在if语句块里。")]),a._v(" "),e("p",[a._v("在catch语句里声明的变量也具有同样的作用域规则。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('try {\n  throw "oh no!"\n}\ncatch (e) {\n  console.log("Oh well.")\n}\n\n// 错误: \'e\' 在这里不存在\nconsole.log(e)\n')])])]),e("p",[a._v("拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。它只是用来说明我们不能在let语句之前访问它们，幸运的是TypeScript可以告诉我们这些信息。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a++ // 在声明a之前引用a是非法的\nlet a\n")])])]),e("h3",{attrs:{id:"重定义及屏蔽"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重定义及屏蔽"}},[a._v("#")]),a._v(" 重定义及屏蔽")]),a._v(" "),e("p",[a._v("我们提过使用var声明时，它不在乎你声明多少次；你只会得到1个。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f(x) {\n  var x\n  var x\n\n  if (true) {\n    var x\n  }\n}\n")])])]),e("p",[a._v("在上面的例子里，所有x的声明实际上都引用一个相同的x，并且这是完全有效的代码。这经常会成为bug的来源。好的是，let声明就不会这么宽松了。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let x = 10\nlet x = 20 // 错误，不能在1个作用域里多次声明`x`\n")])])]),e("p",[a._v("并不是要求两个均是块级作用域的声明TypeScript才会给出一个错误的警告。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f(x) {\n  let x = 100 // error: interferes with parameter declaration\n}\n\nfunction g() {\n  let x = 100\n  var x = 100 // error: can't have both declarations of 'x'\n}\n")])])]),e("p",[a._v("并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f(condition, x) {\n  if (condition) {\n    let x = 100\n    return x\n  }\n\n  return x\n}\n\nf(false, 0) // returns 0\nf(true, 0)  // returns 100\n")])])]),e("p",[a._v("在一个嵌套作用域里引入一个新名字的行为称做屏蔽。它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误。 例如，假设我们现在用let重写之前的sumMatrix函数。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function sumMatrix(matrix: number[][]) {\n  let sum = 0\n  for (let i = 0 i < matrix.length i++) {\n    var currentRow = matrix[i]\n    for (let i = 0 i < currentRow.length i++) {\n      sum += currentRow[i]\n    }\n  }\n  return sum\n}\n")])])]),e("p",[a._v("这个版本的循环能得到正确的结果，因为内层循环的i可以屏蔽掉外层循环的i。\n通常来讲应该避免使用屏蔽，因为我们需要写出清晰的代码。")]),a._v(" "),e("h3",{attrs:{id:"块级作用域变量的获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域变量的获取"}},[a._v("#")]),a._v(" 块级作用域变量的获取")]),a._v(" "),e("p",[a._v("在我们最初谈及获取用var声明的变量时，我们简略地探究了一下在获取到了变量之后它的行为是怎样的。 直观地讲，每次进入一个作用域时，它创建了一个变量的环境。就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('function theCityThatAlwaysSleeps() {\n  let getCity\n  if (true) {\n    let city = "Seattle"\n    getCity = function() {\n      return city\n    }\n  }\n\n  return getCity()\n}\n')])])]),e("p",[a._v("因为我们已经在city的环境里获取到了city，所以就算if语句执行结束后我们仍然可以访问它。")]),a._v(" "),e("p",[a._v("回想一下前面setTimeout的例子，我们最后需要使用立即执行的函数表达式来获取每次for循环迭代里的状态。 实际上，我们做的是为获取到的变量创建了一个新的变量环境。 这样做挺痛苦的，但是幸运的是，你不必在TypeScript里这样做了。")]),a._v(" "),e("p",[a._v("当let声明出现在循环体里时拥有完全不同的行为。 不仅是在循环里引入了一个新的变量环境，而是针对每次迭代都会创建这样一个新作用域。这就是我们在使用立即执行的函数表达式时做的事，所以在 setTimeout例子里我们仅使用let声明就可以了。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (let i = 0 i < 10  i++) {\n  setTimeout(function() {console.log(i) }, 100 * i)\n}\n")])])]),e("p",[a._v("会输出与预料一致的结果：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n")])])]),e("h2",{attrs:{id:"const-声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const-声明"}},[a._v("#")]),a._v(" const 声明")]),a._v(" "),e("p",[a._v("const 声明是声明变量的另一种方式。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const numLivesForCat = 9\n")])])]),e("p",[a._v("它们与let声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。换句话说，它们拥有与let相同的作用域规则，但是不能对它们重新赋值。")]),a._v(" "),e("p",[a._v("这很好理解，它们引用的值是不可变的。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('const numLivesForCat = 9\nconst kitty = {\n  name: "Aurora",\n  numLives: numLivesForCat,\n}\n\n// 错误\nkitty = {\n  name: "Danielle",\n  numLives: numLivesForCat\n}\n\n// 以下全部正确\nkitty.name = "Rory"\nkitty.name = "Kitty"\nkitty.name = "Cat"\nkitty.numLives--\n')])])]),e("p",[a._v("除非你使用特殊的方法去避免，实际上const变量的内部状态是可修改的。")]),a._v(" "),e("h2",{attrs:{id:"let-vs-const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-vs-const"}},[a._v("#")]),a._v(" let vs. const")]),a._v(" "),e("p",[a._v("现在我们有两种作用域相似的声明方式，我们自然会问到底应该使用哪个。与大多数泛泛的问题一样，答案是：依情况而定。")]),a._v(" "),e("p",[a._v("使用最小特权原则，所有变量除了你计划去修改的都应该使用const。基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。使用 const也可以让我们更容易的推测数据的流动。")]),a._v(" "),e("h2",{attrs:{id:"解构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构"}},[a._v("#")]),a._v(" 解构")]),a._v(" "),e("h3",{attrs:{id:"解构数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构数组"}},[a._v("#")]),a._v(" 解构数组")]),a._v(" "),e("p",[a._v("最简单的解构莫过于数组的解构赋值了：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let input = [1, 2]\nlet [first, second] = input\nconsole.log(first) // outputs 1\nconsole.log(second) // outputs 2\n")])])]),e("p",[a._v("这创建了2个命名变量 first 和 second。 相当于使用了索引，但更为方便：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("first = input[0]\nsecond = input[1]\n")])])]),e("p",[a._v("解构作用于已声明的变量会更好：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 变量交换\n[first, second] = [second, first]\n")])])]),e("p",[a._v("作用于函数参数：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f([first, second]: [number, number]) {\n  console.log(first)\n  console.log(second)\n}\nf(input)\n")])])]),e("p",[a._v("你可以在数组里使用...语法创建剩余变量：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [first, ...rest] = [1, 2, 3, 4]\nconsole.log(first) // outputs 1\nconsole.log(rest) // outputs [ 2, 3, 4 ]\n")])])]),e("p",[a._v("当然，由于是JavaScript, 你可以忽略你不关心的尾随元素：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [first] = [1, 2, 3, 4]\nconsole.log(first) // outputs 1\n")])])]),e("p",[a._v("或其它元素：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [, second, , fourth] = [1, 2, 3, 4]\n")])])]),e("h3",{attrs:{id:"对象解构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象解构"}},[a._v("#")]),a._v(" 对象解构")]),a._v(" "),e("p",[a._v("你也可以解构对象：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let o = {\n  a: "foo",\n  b: 12,\n  c: "bar"\n}\nlet { a, b } = o\n')])])]),e("p",[a._v("这通过 o.a and o.b 创建了 a 和 b 。 注意，如果你不需要 c 你可以忽略它。")]),a._v(" "),e("p",[a._v("就像数组解构，你可以用没有声明的赋值：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('({ a, b } = { a: "baz", b: 101 })\n')])])]),e("p",[a._v("注意，我们需要用括号将它括起来，因为Javascript通常会将以 { 起始的语句解析为一个块。")]),a._v(" "),e("p",[a._v("你可以在对象里使用...语法创建剩余变量：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let { a, ...passthrough } = o\nlet total = passthrough.b + passthrough.c.length\n")])])]),e("p",[e("em",[e("strong",[a._v("属性重命名")])]),a._v("\n你也可以给属性以不同的名字：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let { a: newName1, b: newName2 } = o\n")])])]),e("p",[a._v('这里的语法开始变得混乱。 你可以将 a: newName1 读做 "a 作为 newName1"。 方向是从左到右，好像你写成了以下样子：')]),a._v(" "),e("p",[a._v("let newName1 = o.a\nlet newName2 = o.b\n令人困惑的是，这里的冒号不是指示类型的。 如果你想指定它的类型，仍然需要在其后写上完整的模式。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let {a, b}: {a: string, b: number} = o\n")])])]),e("p",[e("em",[e("strong",[a._v("默认值")])]),a._v("\n默认值可以让你在属性为 undefined 时使用缺省值：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function keepWholeObject(wholeObject: { a: string, b?: number }) {\n  let { a, b = 1001 } = wholeObject\n}\n")])])]),e("p",[a._v("现在，即使 b 为 undefined，keepWholeObject 函数的变量 wholeObject 的属性 a 和 b 都会有值。")]),a._v(" "),e("h3",{attrs:{id:"函数声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[a._v("#")]),a._v(" 函数声明")]),a._v(" "),e("p",[a._v("解构也能用于函数声明。看以下简单的情况：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type C = { a: string, b?: number }\nfunction f({ a, b }: C): void {\n  // ...\n}\n")])])]),e("p",[a._v("但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('function f({ a="", b=0 } = {}): void {\n  // ...\n}\nf()\n')])])]),e("p",[a._v("上面的代码是一个类型推断的例子")]),a._v(" "),e("p",[a._v("其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道 C 的定义有一个 b 可选属性：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('function f({ a, b = 0 } = { a: "" }): void {\n  // ...\n}\nf({ a: "yes" }) // 正确, 提供了参数，a值为字符串"yes"，默认 b = 0\nf() // 正确, 如果不提供参数，默认a值为空字符串 {a: ""}, b默认值为0：b = 0\nf({}) // 错误, 如果提供了参数，a必须要给值\n')])])]),e("p",[a._v("要小心使用解构。从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。解构表达式要尽量保持小而简单。你自己也可以直接使用解构将会生成的赋值表达式。")]),a._v(" "),e("h3",{attrs:{id:"展开"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#展开"}},[a._v("#")]),a._v(" 展开")]),a._v(" "),e("p",[a._v("展开操作符正与解构相反。它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。 例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let first = [1, 2]\nlet second = [3, 4]\nlet bothPlus = [0, ...first, ...second, 5]\n")])])]),e("p",[a._v("这会令bothPlus的值为[0, 1, 2, 3, 4, 5]。 展开操作创建了first和second的一份浅拷贝。它们不会被展开操作所改变。")]),a._v(" "),e("p",[a._v("你还可以展开对象：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let defaults = { food: "spicy", price: "$$", ambiance: "noisy" }\nlet search = { ...defaults, food: "rich" }\n')])])]),e("p",[a._v('search的值为{ food: "rich", price: "$$", ambiance: "noisy" }。 对象的展开比数组的展开要复杂的多。像数组展开一样，它是从左至右进行处理，但结果仍为对象。这就意味着出现在展开对象后面的属性会覆盖前面的属性。 因此，如果我们修改上面的例子，在结尾处进行展开的话：')]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let defaults = { food: "spicy", price: "$$", ambiance: "noisy" }\nlet search = { food: "rich", ...defaults }\n')])])]),e("p",[a._v('那么，defaults里的food属性会重写food: "rich"，在这里这并不是我们想要的结果。')]),a._v(" "),e("p",[a._v("对象展开还有其它一些意想不到的限制。 首先，它仅包含对象自身的可枚举属性。 大体上是说当你展开一个对象实例时，你会丢失其方法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("class C {\n  p = 12\n  m() {\n  }\n}\nlet c = new C()\nlet clone = { ...c }\nclone.p // 正确\nclone.m() // 错误!\n")])])]),e("p",[a._v("其次，TypeScript编译器不允许展开泛型函数上的类型参数。这个特性会在TypeScript的未来版本中考虑实现。")])])}),[],!1,null,null,null);t.default=n.exports}}]);