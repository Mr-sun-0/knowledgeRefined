(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{379:function(e,r,t){"use strict";t.r(r);var n=t(42),a=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"声明合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明合并"}},[e._v("#")]),e._v(" 声明合并")]),e._v(" "),t("p",[e._v("如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型：")]),e._v(" "),t("h2",{attrs:{id:"函数的合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数的合并"}},[e._v("#")]),e._v(" 函数的合并")]),e._v(" "),t("p",[e._v("之前学习过重载，我们可以使用重载定义多个函数类型：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function reverse(x: number): number\nfunction reverse(x: string): string\nfunction reverse(x: number | string): number | string {\n  if (typeof x === 'number') {\n    return Number(x.toString().split('').reverse().join(''))\n  } else if (typeof x === 'string') {\n    return x.split('').reverse().join('')\n  }\n}\n")])])]),t("h2",{attrs:{id:"接口的合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口的合并"}},[e._v("#")]),e._v(" 接口的合并")]),e._v(" "),t("p",[e._v("接口中的属性在合并时会简单的合并到一个接口中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n  price: number\n}\ninterface Alarm {\n  weight: number\n}\n")])])]),t("p",[e._v("相当于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n  price: number\n  weight: number\n}\n")])])]),t("p",[e._v("注意，"),t("strong",[e._v("合并的属性的类型必须是唯一的")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n  price: number\n}\ninterface Alarm {\n  price: number  // 虽然重复了，但是类型都是 `number`，所以不会报错\n  weight: number\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n  price: number\n}\ninterface Alarm {\n  price: string  // 类型不一致，会报错\n  weight: number\n}\n\n// index.ts(5,3): error TS2403: Subsequent variable declarations must have the same type.  Variable 'price' must be of type 'number', but here has type 'string'.\n")])])]),t("p",[e._v("接口中方法的合并，与函数的合并一样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n  price: number\n  alert(s: string): string\n}\ninterface Alarm {\n  weight: number\n  alert(s: string, n: number): string\n}\n")])])]),t("p",[e._v("相当于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n  price: number\n  weight: number\n  alert(s: string): string\n  alert(s: string, n: number): string\n}\n")])])]),t("h2",{attrs:{id:"类的合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的合并"}},[e._v("#")]),e._v(" 类的合并")]),e._v(" "),t("p",[e._v("类的合并与接口的合并规则一致。")])])}),[],!1,null,null,null);r.default=a.exports}}]);