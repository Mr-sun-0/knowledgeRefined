(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{393:function(e,t,r){"use strict";r.r(t);var s=r(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_5分钟了解typescript"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5分钟了解typescript"}},[e._v("#")]),e._v(" 5分钟了解TypeScript")]),e._v(" "),r("h2",{attrs:{id:"构建第一个typescript文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建第一个typescript文件"}},[e._v("#")]),e._v(" 构建第一个TypeScript文件")]),e._v(" "),r("p",[e._v("在编辑器，将下面的代码输入到 "),r("em",[r("strong",[e._v("src/greeter.ts")])]),e._v(" 文件里。我们注意到 "),r("em",[r("strong",[e._v("person: string")])]),e._v("，表示 string 是 person 函数的参数类型注解：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('function greeter(person: string) {\n  return "Hello, " + person\n}\n\nlet user = "Jane User"\nconsole.log(greeter(user))\n')])])]),r("h2",{attrs:{id:"类型注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型注解"}},[e._v("#")]),e._v(" 类型注解")]),e._v(" "),r("p",[e._v("TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。 在这个例子里，我们希望 greeter函数接收一个字符串参数。 然后尝试把 greeter的调用改成传入一个数组：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('function greeter(person: string) {\n return "Hello, " + person\n}\n\nlet user = [0, 1, 2]\nconsole.log(greeter(user))\n')])])]),r("p",[e._v("重新编译，你会看到产生了一个错误：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Argument of type 'number[]' is not assignable to parameter of type 'string'.\n")])])]),r("p",[e._v("类似地，尝试删除greeter调用的所有参数。 TypeScript会告诉你使用了非期望个数的参数调用了这个函数。 在这两种情况中，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。")]),e._v(" "),r("p",[e._v("要注意的是尽管有错误，greeter.js文件还是被创建了。 就算你的代码里有错误，你仍然可以使用TypeScript。但在这种情况下，TypeScript会警告你代码可能不会按预期执行。")]),e._v(" "),r("h2",{attrs:{id:"接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[e._v("#")]),e._v(" 接口")]),e._v(" "),r("p",[e._v("让我们开发这个示例应用。这里我们使用接口来描述一个拥有firstName和lastName字段的对象。 在TypeScript里，只在两个类型内部的结构兼容那么这两个类型就是兼容的。 这就允许我们在实现接口时候只要保证包含了接口要求的结构就可以，而不必明确地使用 implements语句。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('interface Person {\n  firstName: string\n  lastName: string\n}\n\nfunction greeter(person: Person) {\n  return "Hello, " + person.firstName + " " + person.lastName\n}\n\nlet user = { firstName: "Jane", lastName: "User" }\nconsole.log(greeter(user))\n')])])]),r("h2",{attrs:{id:"类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[e._v("#")]),e._v(" 类")]),e._v(" "),r("p",[e._v("最后，让我们使用类来改写这个例子。 TypeScript支持JavaScript的新特性，比如支持基于类的面向对象编程。让我们创建一个Student类，它带有一个构造函数和一些公共字段。 注意类和接口可以一起工作。")]),e._v(" "),r("p",[e._v("还要注意的是，在构造函数的参数上使用public等同于创建了同名的成员变量。")]),e._v(" "),r("blockquote",[r("p",[e._v("***注：***public修饰符会引发 "),r("code",[e._v("Parameter 'firstName' implicitly has an 'any' type.")]),e._v("，解决方法是在"),r("code",[e._v("tsconfig.json")]),e._v("文件中，添加"),r("code",[e._v('"noImplicitAny": false')]),e._v("，或者将"),r("code",[e._v('"strict": true')]),e._v("，改为"),r("code",[e._v('"strict": false')])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('class Student {\n  fullName: string\n  constructor(public firstName, public middleInitial, public lastName) {\n this.fullName = firstName + " " + middleInitial + " " + lastName\n  }\n}\n\ninterface Person {\n  firstName: string\n  lastName: string\n}\n\nfunction greeter(person: Person) {\n  return "Hello, " + person.firstName + " " + person.lastName\n}\n\nlet user = new Student("Jane", "M.", "User")\nconsole.log(greeter(user))\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);