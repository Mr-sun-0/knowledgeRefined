(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{377:function(e,n,t){"use strict";t.r(n);var a=t(42),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"基础类型-高级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础类型-高级"}},[e._v("#")]),e._v(" 基础类型-高级")]),e._v(" "),t("h2",{attrs:{id:"类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[e._v("#")]),e._v(" 类型推断")]),e._v(" "),t("p",[e._v("如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。")]),e._v(" "),t("h3",{attrs:{id:"什么是类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是类型推断"}},[e._v("#")]),e._v(" 什么是类型推断")]),e._v(" "),t("p",[e._v("以下代码虽然没有指定类型，但是会在编译的时候报错：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay = '初一'\nlunarDay = 1\n// Type '1' is not assignable to type 'string'.\n")])])]),t("p",[e._v("事实上，它等价于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay: string = '初一'\nlunarDay = 1\n")])])]),t("p",[e._v("TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。\n如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：\nlet myFavoriteNumber\nmyFavoriteNumber = 'seven'\nmyFavoriteNumber = 7")]),e._v(" "),t("p",[e._v('let someValue: any = "this is a string"')]),e._v(" "),t("p",[e._v("let strLength: number = ("),t("string",[e._v("someValue).length\n另一个为as语法：")])],1),e._v(" "),t("p",[e._v('let someValue: any = "this is a string"')]),e._v(" "),t("p",[e._v("let strLength: number = (someValue as string).length\n两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。")]),e._v(" "),t("h2",{attrs:{id:"联合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[e._v("#")]),e._v(" 联合类型")]),e._v(" "),t("p",[e._v("联合类型（Union Types）表示取值可以为多种类型中的一种。")]),e._v(" "),t("h3",{attrs:{id:"简单的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的例子"}},[e._v("#")]),e._v(" 简单的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay: string | number\nlunarDay = '初一'\nlunarDay = 1\n")])])]),t("p",[e._v("联合类型使用 | 分隔每个类型。")]),e._v(" "),t("p",[e._v("这里的"),t("code",[e._v("let lunarDay: string | number")]),e._v("的含义是，允许 lunarDay 的类型是 string 或者 number，但是不能是其他类型。")]),e._v(" "),t("h3",{attrs:{id:"访问联合类型的属性或方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问联合类型的属性或方法"}},[e._v("#")]),e._v(" 访问联合类型的属性或方法")]),e._v(" "),t("p",[e._v("当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getLength(something: string | number): number {\n  return something.length\n}\n// Property 'length' does not exist on type 'string | number'.\n// Property 'length' does not exist on type 'number'. \n")])])]),t("p",[e._v("上例中，length 不是 string 和 number 的共有属性，所以会报错。\n访问 string 和 number 的共有属性是没问题的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getString(something: string | number): string {\n  return something.toString()\n}\n")])])]),t("h3",{attrs:{id:"联合类型赋值的类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型赋值的类型推断"}},[e._v("#")]),e._v(" 联合类型赋值的类型推断")]),e._v(" "),t("p",[e._v("联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay: string | number\nlunarDay = '初一'\nconsole.log(lunarDay.length) // 2\nlunarDay = 1\nconsole.log(lunarDay.length) // 编译时报错\n")])])]),t("p",[e._v("上例中，第二行的 lunarDay 被推断成了 string，访问它的 length 属性不会报错。\n而第四行的 lunarDay 被推断成了 number，访问它的 length 属性时就报错了。")]),e._v(" "),t("h2",{attrs:{id:"null-和-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[e._v("#")]),e._v(" Null 和 Undefined")]),e._v(" "),t("p",[t("code",[e._v("null")]),e._v(" 是一个只有一个值的特殊类型。表示一个空对象引用。用 typeof 检测 null 返回是 "),t("code",[e._v("object")]),e._v("。\ntypeof 一个没有值的变量会返回 "),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("p",[e._v("null 和 Undefined 是其他任何类型（包括 void）的子类型，可以赋值给其它类型，如数字类型，此时，赋值后的类型会变成 null 或 undefined。")]),e._v(" "),t("p",[e._v("在TypeScript中启用严格的空校验（--strictNullChecks）特性，使得 "),t("code",[e._v("null")]),e._v(" 和 "),t("code",[e._v("undefined")]),e._v(" 只能被赋值给 "),t("code",[e._v("void")]),e._v(" 或本身对应的类型")]),e._v(" "),t("p",[e._v("在 tsconfig.json 中启用 --strictNullChecks")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let x: number\nx = 1 // 运行正确\nx = undefined // 运行错误\nx = null // 运行错误\n")])])]),t("p",[e._v("在 tsconfig.json 中启用 --strictNullChecks，需要将x赋值为联合类型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let x: number | null | undefined //本身对应的类型\nx = 1 // 运行正确\nx = undefined // 运行正确\nx = null // 运行正确\n")])])]),t("h2",{attrs:{id:"never"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#never"}},[e._v("#")]),e._v(" Never")]),e._v(" "),t("p",[e._v("never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。")]),e._v(" "),t("p",[e._v("never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。")]),e._v(" "),t("p",[e._v("下面是一些返回never类型的函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n  throw new Error(message)\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n  return error("Something failed")\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n  while (true) {\n  }\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);